Bootstrap: localimage
From: /software/chtc/containers/ubuntu/22.04/openmpi-4.1.6_gcc-11.3.0.sif

%files
  /home/ligross/chtc_apptainer/openmc/hdf5-1_13_2.tar.gz /opt/hdf5-1_13_2.tar.gz
%environment
  # export OPENMC_CROSS_SECTIONS=/opt/lewis/cross_sections/endfb-vii.1-hdf5/cross_sections.xml
  export OPENMC_CROSS_SECTIONS=/opt/lewis/cross_sections/nndc_hdf5/cross_sections.xml
  export OPENMC_ENDF_DATA=/opt/lewis/cross_sections/endf-b-vii.1
  export PATH=/opt/software/openmc/bin:/usr/bin:$PATH
  export LD_LIBRARY_PATH=/opt/software/openmc/lib:$LD_LIBRARY_PATH
  export PYTHONPATH=/opt/software/openmc:$PYTHONPATH
%post
  chmod 777 /tmp # to allow pip to work
  chmod 777 /opt # to allow test

# apt-get software not in base image
apt-get update && \
apt-get -y upgrade && \
apt-get install -y \
    xz-utils \
    make \
    autoconf \
    flex \
    bison \
    libssl-dev \
    libtool \
    libpng-dev

# install python-config and setuptools
python -m pip install python-config setuptools

# install pytest
python -m pip install pytest

# install tzdata before the next package set
DEBIAN_FRONTEND=noninteractive TZ=America/Chicago apt-get -y install tzdata

# packages that need to be installed after tzdata is properly installed
apt-get install -y \
    pkg-config

# TODO MAYBE DELETE THIS ALSO
python -m pip install --upgrade cmake

# set alternative so that python runs python 3 code without installing python 2
# the arguments are as follows:
# RUN update-alternatives --install </path/to/alternative> <name> </path/to/source> <priority>
update-alternatives --install /usr/local/bin/python python /usr/bin/python3 99

# create directorries needed for dependencies, data, and the place to clone the openmc repo
mkdir /opt/software && \
mkdir /opt/software/openmc && \
mkdir /opt/software/temp && \
mkdir /opt/lewis && \
mkdir /opt/lewis/cross_sections

# copy hdf5 tar into the correct directory
cp /opt/hdf5-1_13_2.tar.gz /opt/software/temp

# build hdf5 and install in /opt/software/hdf5
mkdir /opt/software/hdf5 && \
cd /opt/software/temp && \
tar -xvf hdf5-1_13_2.tar.gz && \
cd hdf5-hdf5-1_13_2 && \
mkdir build && \
cd build && \
../configure --prefix="/opt/software/hdf5" --enable-optimization=high --enable-shared  --enable-hl --enable-build-mode=production --enable-parallel && \
make -j8 && \
make install && \
rm -rf /opt/software/temp/*

# no more software requires temp
rm -rf /opt/software/temp

# HDF5 env vars
export HDF5_ROOT=/opt/software/hdf5
export HDF5_INCLUDE_DIR=/opt/software/hdf5/include
export HDF5_LIBDIR=/opt/software/hdf5/lib
export METHOD=opt

# change to location of cross sections
cd /opt/lewis

# obtain and unpack cross sections from ANL Box (ENDFB-vii), point environment variable to correct
wget -q -O - https://anl.box.com/shared/static/9igk353zpy8fn9ttvtrqgzvw1vtejoz6.xz | tar -C cross_sections -xJ

# download test cross sections
wget -q -O - https://anl.box.com/shared/static/teaup95cqv8s9nn56hfn7ku8mmelr95p.xz | tar -C cross_sections -xJ
wget -q -O - https://anl.box.com/shared/static/4kd2gxnf4gtk4w1c8eua5fsua22kvgjb.xz | tar -C cross_sections -xJ

# clone openmc
git clone --recurse-submodules https://github.com/openmc-dev/openmc.git

cd /opt/lewis/openmc

# build and install OpenMC
git checkout v0.13.3 && \
mkdir build && \
cd build && \
cmake -DCMAKE_INSTALL_PREFIX=/opt/software/openmc -DOPENMC_USE_MPI=ON -DCMAKE_BUILD_TYPE=Debug .. && \
make install -j8

# BEST PRACTICE USE python -m pip so it finds
cd /opt/lewis/openmc && \
python -m pip install .[depletion-mpi]
